name: Build

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quick_build:
    name: Quick build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:       [ubuntu-22.04]
        pip-path: [~/.cache/pip]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - uses: actions/cache@v3
        id: pip-cache
        with:
          path: ${{ matrix.pip-path }}
          key: ${{ matrix.os }}-pip-${{ hashFiles('setup.py') }}

      - name: Install dependencies
        run: |
          pip3 install wheel oldest-supported-numpy PyGLM

      - uses: hendrikmuhs/ccache-action@v1.2.8
        with:
          key: ${{ matrix.os }}
          variant: ccache

      - name: Build/install extension
        run: |
          python3 setup.py build --debug
          python3 setup.py bdist_wheel --py-limited-api=cp34
          pip3 install dist/RocketSim-1.2.0a1-cp34-abi3-linux_x86_64.whl
        env:
          CC: /usr/lib/ccache/gcc-12
          CXX: /usr/lib/ccache/g++-12

      - name: Load collision meshes
        uses: actions/cache/restore@v3
        id: collision-cache-restore
        with:
          path: collision_meshes
          key: collision-cache
          enableCrossOsArchive: true

      - name: Download collision meshes
        if: steps.collision-cache-restore.outputs.cache-hit != 'true'
        uses: suisei-cn/actions-download-file@v1.3.0
        with:
          url: https://mtheall.com/~mtheall/collision_meshes.tar

      - name: Extract collision meshes
        if: steps.collision-cache-restore.outputs.cache-hit != 'true'
        uses: a7ul/tar-action@v1.1.3
        with:
          command: x
          files: collision_meshes.tar

      - name: Save collision meshes
        if: steps.collision-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: collision_meshes
          key: collision-cache
          enableCrossOsArchive: true

      - name: Run unit tests
        run: |
          python3 python/unit_test.py

      - name: Run regression tests
        run: |
          python3 python/regression_test.py

  build_wheels:
    needs: quick_build
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-22.04, macos-12]
        include:
        - os: windows-2019
          pip-path: ~\AppData\Local\pip\Cache
          wheel-path: dist/RocketSim-1.2.0a1-cp34-abi3-win_amd64.whl
        - os: ubuntu-22.04
          pip-path: ~/.cache/pip
          wheel-path: dist/RocketSim-1.2.0a1-cp34-abi3-linux_x86_64.whl
        - os: macos-12
          pip-path: ~/Library/Caches/pip
          wheel-path: dist/RocketSim-1.2.0a1-cp34-abi3-macosx_11_0_x86_64.whl

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - uses: actions/cache@v3
        id: pip-cache
        with:
          path: ${{ matrix.pip-path }}
          key: ${{ matrix.os }}-pip-${{ hashFiles('setup.py') }}

      - name: Install dependencies
        run: |
          pip3 install wheel oldest-supported-numpy PyGLM

      - name: Build extension
        run: |
          python3 setup.py build
          python3 setup.py bdist_wheel --py-limited-api=cp34
          pip3 install ${{ matrix.wheel-path }}
        env:
          CC: gcc-12
          CXX: g++-12

      - name: Load collision meshes
        uses: actions/cache/restore@v3
        id: collision-cache-restore
        with:
          path: collision_meshes
          key: collision-cache
          enableCrossOsArchive: true

      - name: Download collision meshes
        if: steps.collision-cache-restore.outputs.cache-hit != 'true'
        uses: suisei-cn/actions-download-file@v1.3.0
        with:
          url: https://mtheall.com/~mtheall/collision_meshes.tar

      - name: Extract collision meshes
        if: steps.collision-cache-restore.outputs.cache-hit != 'true'
        uses: a7ul/tar-action@v1.1.3
        with:
          command: x
          files: collision_meshes.tar

      - name: Save collision meshes
        if: steps.collision-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: collision_meshes
          key: collision-cache
          enableCrossOsArchive: true

      - name: Run unit tests
        run: |
          python3 python/unit_test.py

      - name: Run regression tests
        run: |
          python3 python/regression_test.py

      - uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.wheel-path }}
